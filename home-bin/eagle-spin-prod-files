#!/bin/bash

errormsg () {
	echo -e "Error: \033[1m${1}!\033[0m"
	echo
	echo "Usage: $0 [-n] [-c|--cam cam-job-file] <revision> [file.sch]"
	echo
	echo $'\t-d\t'"Delete temporary working directory after successful completion."
	echo
	echo $'\t-c\t'"Use a specific CAM job rather than the auto-detected one."
	echo
	echo $'\t'"revision: The revision name to use when generating output files."
	echo
	echo $'\t'"file.sch: The eagle schematic to operate on. Defaults to most recently altered in current directory."
	echo
	echo "Example: ${0##*/} rev3"
	echo
	exit 1
}

# default don't delete
NODELETE=1

while [[ "$1" =~ ^- ]]
do
	case "$1" in
		-n|--nodelete)
			NODELETE=1
			shift
			;;
		-d|--delete)
			unset NODELETE
			shift
			;;
		-c|--cam)
			CAMFILE="$2"
			if [ ! -r "$CAMFILE" ]
			then
				echo "Error: cannot read '$CAMFILE'" >&2
				exit 1
			fi
			shift
			shift
			;;
	esac
done

### Check options and files

REV="$1"
SCHEMATIC="$2"

if [ -z "$SCHEMATIC" ]
then
	SCHEMATIC="$(/bin/ls -1rt *sch | tail -n1)"
fi

BOARD="${SCHEMATIC%%.sch}.brd"
NAME="${SCHEMATIC%%.sch}"

if [ -z "$SCHEMATIC" ] || [ ! -r "$SCHEMATIC" ]
then
	errormsg "No schematic found"
fi

if [ ! -r "$BOARD" ]
then
	errormsg "No board found"
fi

if [ -z "$REV" ]
then
	errormsg "No revision specified"
fi

NAMEREV="${NAME}-${REV}"

echo "Using $NAMEREV"

O="$NAMEREV"

### Generate working directory

rm -rf "$O"
mkdir "$O"

perl -pe 's/&gt;REV/'"$REV"'/g' "$SCHEMATIC" > "$O/${NAMEREV}.sch"
perl -pe 's/&gt;REV/'"$REV"'/g' "$BOARD"     > "$O/${NAMEREV}.brd"

pushd "$O" >/dev/null || exit 1

### Design Files

zip "${NAMEREV}-DesignFiles-Eagle7.zip" "${NAMEREV}.sch" "${NAMEREV}.brd" || exit 1

eagle -N- -C "
	EDIT .sch;
		print 100 -1 file ${NAMEREV}-schematic.pdf paper A3 sheets ALL landscape -caption -window -black -mirror -rotate -upsidedown;
	EDIT .brd;
		display none tNames tValues tPlace tDocu bNames bValues bPlace bDocu;
		group all;
		change font proportional (>0 0);
		group;
		set palette 55 0x80808080;
		set color_layer dimension 15;
		set color_layer tPlace 54; set color_layer tDocu 54; set color_layer tNames 7; set color_layer tValues 23; set color_layer tStop 55; set fill_layer tStop 11;
		display none dimension pads tPlace tDocu tNames tValues tStop Measures;
		print 100 -1 file ${NAMEREV}-Assembly-TOP.pdf    paper A4 sheets ALL landscape -mirror -caption -window -black -rotate -upsidedown;
		set color_layer bPlace 54; set color_layer bDocu 54; set color_layer bNames 7; set color_layer bValues 23; set color_layer bStop 55; set fill_layer bStop 12;
		display none dimension pads bPlace bDocu bNames bValues bStop;
		print 100 -1 file ${NAMEREV}-Assembly-BOTTOM.pdf paper A4 sheets ALL landscape  mirror -caption -window -black -rotate -upsidedown;
	set confirm no;
	quit;" \
	"${NAMEREV}.sch"

pdfunite "${NAMEREV}-Assembly-TOP.pdf" "${NAMEREV}-Assembly-BOTTOM.pdf" "${NAMEREV}-Assembly.pdf" && rm "${NAMEREV}-Assembly-TOP.pdf" "${NAMEREV}-Assembly-BOTTOM.pdf"


zip "${NAMEREV}-DesignFiles-Eagle7.zip" "${NAMEREV}-schematic.pdf" || exit 1

### Gerbers

LAYERS=$(eagle-brd-export-layercount "${NAMEREV}.brd")

if [ -z "$CAMFILE" ]
then
	CAMFILE="$HOME/eagle/eagle-7_${LAYERS}layer.cam"
fi

Cam2Gerber.py -b "${NAMEREV}.brd" -c "$CAMFILE" -e "$(which eagle)" || exit 1
rm *dri *gpi

zip "${NAMEREV}-GERBERS_AND_STENCIL.zip" "${NAMEREV}_"* || exit 1

brd2scad "${NAMEREV}.brd" #brd2scad needs gerbers, so we must do this before nuking them

rm "${NAMEREV}_"*

### BOM

eagle-brd-export-bom "${NAMEREV}.brd" 2>/dev/null | head -n1 > "${NAMEREV}-BOM.csv"
eagle-brd-export-bom "${NAMEREV}.brd" | tail -n+2 | sort -h -k 1.2 -r >> "${NAMEREV}-BOM.csv"

unoconv -i FilterOptions=44,34,76 -o "${NAMEREV}-BOM.xlsx" "${NAMEREV}-BOM.csv" || true
# libreoffice --convert-to xlsx "${NAMEREV}-BOM.csv" || true

### Assembly

eagle-brd-export-assembly "${NAMEREV}.brd" > "${NAMEREV}-Assembly.txt"

zip "${NAMEREV}-Assembly.zip" "${NAMEREV}-Assembly.txt" "${NAMEREV}-Assembly.pdf"

### Manifest

for ZIP in *zip
do
	unzip -l "$ZIP" >> "${NAMEREV}-Manifest.txt"
done

### Board Info

(
	eagle-brd-dimension "${NAMEREV}.brd"
	echo "Layer count:     $LAYERS"
	echo "Date:            $(date +'%F %H:%M:%S %z')"
	echo "Revision:        $REV"
) > "${NAMEREV}-Board-Info.txt"

### 3D preview

declare -a DIMENSION
readarray -t -d\  DIMENSION < <(echo -n $(eagle-brd-dimension -p "${NAMEREV}.brd"))

echo "Dimension: ${DIMENSION[@]}"

ROT=0
# if [[ "${DIMENSION[0]}" -lt "${DIMENSION[1]}" ]]
if perl -e "exit 1 if ${DIMENSION[0]} >= ${DIMENSION[1]};"
then
	ROT=90
fi

echo /usr/bin/openscad --imgsize 5120,2880 --camera "${DIMENSION[2]}","${DIMENSION[3]}",0,15,0,$(( $ROT + 15 )),"${DIMENSION[4]}" --autocenter --viewall -o "${NAMEREV}-3D-TOP.png" "${NAMEREV}.scad"
/usr/bin/openscad --imgsize 5120,2880 --camera "${DIMENSION[2]}","${DIMENSION[3]}",0,15,0,$(( $ROT + 15 )),"${DIMENSION[4]}" --autocenter --viewall -o "${NAMEREV}-3D-TOP.png" "${NAMEREV}.scad" 2>&1 | grep -v '^Trimming cache:'
echo /usr/bin/openscad --imgsize 5120,2880 --camera "${DIMENSION[2]}","${DIMENSION[3]}",0,195,0,$(( $ROT - 15 )),"${DIMENSION[4]}" --autocenter --viewall -o "${NAMEREV}-3D-BOTTOM.png" "${NAMEREV}.scad"
/usr/bin/openscad --imgsize 5120,2880 --camera "${DIMENSION[2]}","${DIMENSION[3]}",0,195,0,$(( $ROT - 15 )),"${DIMENSION[4]}" --autocenter --viewall -o "${NAMEREV}-3D-BOTTOM.png" "${NAMEREV}.scad" 2>&1 | grep -v '^Trimming cache:'

/usr/bin/openscad -o "${NAMEREV}.csg" "${NAMEREV}.scad" && gzip < "${NAMEREV}.csg" > "${NAMEREV}.csg.gz" && rm "${NAMEREV}.csg"

### Construct production zip

popd >/dev/null

rm -f "${NAMEREV}.zip"

zip "${NAMEREV}.zip" "$O/${NAMEREV}-Board-Info.txt" "$O/${NAMEREV}-DesignFiles-Eagle7.zip" "$O/${NAMEREV}-schematic.pdf" "$O/${NAMEREV}-GERBERS_AND_STENCIL.zip" "$O/${NAMEREV}-Assembly.zip" "$O/${NAMEREV}-BOM.xlsx" "$O/${NAMEREV}-Manifest.txt" "$O/${NAMEREV}.csg.gz" "$O/${NAMEREV}-3D-TOP.png" "$O/${NAMEREV}-3D-BOTTOM.png"

### Generate Manifest

for Z in {1..2}
do
	unzip -l "${NAMEREV}.zip" >> "$O/${NAMEREV}-Manifest.txt"
	zip "${NAMEREV}.zip" "$O/${NAMEREV}-Manifest.txt"
done

### Notify completion

echo
cat "$O/${NAMEREV}-Board-Info.txt"

if [ -z "$NODELETE" ]
then
	rm -rf "$O"
else
	# make files in output dir read-only so they always match the zip even if reopened later
	chmod -w "$O"/*
fi

echo
echo -e "\033[32;1m${NAMEREV}.zip is ready\033[0m"
echo

exit 0
