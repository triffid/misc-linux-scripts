#!/bin/bash

URL=""
USER=""
JOBS=32
CHUNKSIZE=$(( 1048576 * 8 ))
DELAY=0.25

RED=$'\e[31m'
BOLD=$'\e[1m'
GREEN=$'\e[32m'
RESETCOLOUR=$'\e[0m'
NORMAL=$'\e[0m'
TAB=$'\t'

function usage {
	echo "Usage: ${0##*/} [-c chunksize] [-j concurrent downloads] [-o outfile] [-u username] [-C cookiejar] [-d delay] [--sha1sum checksum] [--sha256sum checksum] [--md5sum checksum] url [[options] url] â€¦"
}

function urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

if [ -z "$1" ]
then
	usage
	exit 0
fi

trap 'kill 0' SIGINT
trap 'kill 0' SIGTERM
trap 'kill 0' SIGKILL

function cursize () {
	if [ -e "$1" ]
	then
		stat -c "%s" "$1" 2>/dev/null
		return 0
	fi
	echo 0
}

function getonce() {
	curl -LsS \
		${USER:+-u "$USER:$PASS"} \
		${COOKIEJAR:+-b "$COOKIEJAR"} \
		--range $((($N * $CHUNKSIZE) + $(cursize "$CHUNKFN")))-$((($N * $CHUNKSIZE) + $THISCHUNKSIZE - 1)) \
		-Y 10000 -y 10 \
		"$URL" \
		>> "$CHUNKFN"
}

function get() {
	local I="$1"
	local N=$((10#$I))
	local CHUNKFN=".$FNAME.$I"
	local THISCHUNKSIZE=$CHUNKSIZE

	if [ $N -eq $COUNT ]
	then
		THISCHUNKSIZE=$(($SIZE - ($CHUNKSIZE * $N)))
	fi

	totalrate
	(
		if [ -e "$CHUNKFN" ]
		then
			echo "${BOLD}Resuming${NORMAL} $CHUNKFN [$I of $COUNT]"
		else
			echo "${BOLD}Starting${NORMAL} $CHUNKFN [$I of $COUNT]"
		fi

		getonce

		while [ $(cursize "$CHUNKFN") -lt $THISCHUNKSIZE ]
		do
			totalrate
			if [ -e "$CHUNKFN" ]
			then
				echo "${BOLD}Resuming${NORMAL} $CHUNKFN [$I of $COUNT]${TAB}${TR_TEX}"
			else
				echo "${BOLD}Retrying${NORMAL} $CHUNKFN [$I of $COUNT]${TAB}${TR_TEX}"
			fi

			sleep $DELAY

			getonce
		done

		totalrate
		echo "$CHUNKFN ${BOLD}complete${NORMAL} [$I of $COUNT]${TAB}${TR_TEX}"
	) &
}

TR_LASTFN=""
TR_TOTALSIZE=0
TR_STARTTIME=0
TR_TEX=""
function totalrate() {
	local NEWTOTALSIZE="$(du -cb --files0-from=<(for NN in $(bash -c 'for I in {00..'$COUNT'}; do echo $I; done'); do printf "%s\x00" ".$FNAME.$NN"; done; ) 2>/dev/null | tail -n1 | sed -e 's/\s.*//')"
	local TIME="$(date +%s.%N)"
	if [ "$FNAME" == "$TR_LASTFN" ]
	then
		local RATE="$(bc <<< "($NEWTOTALSIZE - $TR_TOTALSIZE) / ($TIME - $TR_STARTTIME)")"
		if [[ $RATE -ge $(( 2 ** 30 )) ]]
		then
			RATE="$(printf "%6.2fG" "$(bc <<< "scale=2; $RATE / 2^30")")"
		elif [[ $RATE -ge $(( 2 ** 20 )) ]]
		then
			RATE="$(printf "%6.2fM" "$(bc <<< "scale=2; $RATE / 2^20")")"
		elif [[ $RATE -ge $(( 2 ** 10 )) ]]
		then
			RATE="$(printf "%6.2fk" "$(bc <<< "scale=2; $RATE / 2^10")")"
		fi;
		TR_TEX="${RATE}B/s, $(printf "%5.2f" $(bc <<< "scale=2; $NEWTOTALSIZE * 100 / $SIZE"))% complete"
		TR_STARTTIME="$TIME"
		TR_TOTALSIZE="$NEWTOTALSIZE"
	else
		TR_LASTFN="$FNAME"
		TR_TOTALSIZE="$NEWTOTALSIZE"
		TR_STARTTIME="$TIME"
	fi
}

while [ -n "$1" ]
do
	unset FNAME
	unset ALLOK

	while [[ "$1" =~ ^- ]]
	do
		case "$1" in
			"-u")
				shift
				USER="$1"
				;;
			"-c")
				shift
				CHUNKSIZE="$(( $(sed -E 's/([0-9]+)[gG].*/\1 * 1073741824/; s/([0-9]+)M.*/\1 * 1048576/; s/([0-9]+)[kK].*/\1 * 1024/' <<< "$1") + 0 ))"
				;;
			"-o")
				shift
				FNAME="$1"
				;;
			"-j")
				shift
				JOBS=$(($1 + 0))
				;;
			"-d")
				shift
				DELAY="$1"
				;;
			"--sha1sum")
				shift
				SHA1SUM="$1"
				;;
			"--sha256sum")
				shift
				SHA256SUM="$1"
				;;
			"--md5sum")
				shift
				MD5SUM="$1"
				;;
			"-C")
				shift
				COOKIEJAR="$1"
				;;
			*)
				echo "Unknown option: $1"
				usage
				exit 1
				;;
		esac
		shift
	done

	if [ -z "$1" ]
	then
		usage
		exit 0
	fi
	
	URL="$1"
	shift
	
	FNAME=${FNAME:-${URL##*/}}
	FNAME=${FNAME:-index.html}
	FNAME=${FNAME%%\?*}

	if [ -z "$ALLOK" ]
	then
		echo "Downloading $FNAME from $URL"

		if [ -n "$USER" ]
		then
			echo -n "User $USER Password: "
			read -s PASS
		fi

		HEADER="$(curl ${USER:+-u "$USER:$PASS"} ${COOKIEJAR:+-b "$COOKIEJAR"} -A 'Mozilla/5.0' -LsS --range 0-1 -o /dev/null -D - --max-time 10 "$URL" | tee /dev/stderr)"
		SIZE=$(echo "$HEADER" | grep -i "^Content-Range:" | cut -d/ -f2 | tr -d $'\r')
		
		if grep -qi 'Content-Disposition:' <<< "$HEADER"
		then
			FN="$(grep -i '^Content-Disposition:' <<< "$HEADER" | sed -E 's/\r//g;' | cut -d: -f2 | sed -E 's/^.*filename="([^"]+)".*$/\1/;')"
			if grep -qi 'filename=' <<< "$FN"
			then
				FN="$(sed -E 's/^.*filename=(.*?)\r?\b/\1/;' <<< "$FN")"
			fi
			echo "Got new filename \"$FN\""
			# TODO: check sanity of filename
			if [ -n "$FN" ]
			then
				FNAME="$FN"
			else
				exit 1
			fi
		else
			if grep -qi 'Location:' <<< "$HEADER"
			then
				FN="$(grep -i 'Location:' <<< "$HEADER" | tail -n1 | sed -e 's/\r//g')"
				FN="${FN##*/}"
				FN="$(urldecode "$FN")"
				echo
				echo "Filename changed to '$FN' via redirect"
				echo
				FNAME="$FN"
			fi
		fi

		echo "Size is '$SIZE'"

		if [ -z "$SIZE" ] || [ "$SIZE" -le 65536 ]
		then
			echo "Could not determine size, redirected?"
			exit 1
		fi

		COUNT=$(($SIZE / $CHUNKSIZE))

		echo -n "$(($SIZE / $CHUNKSIZE))x$((CHUNKSIZE / 1048576))MB chunks"
		if [ $(($SIZE - (($SIZE / $CHUNKSIZE) * $CHUNKSIZE))) -eq 0 ]
		then
			COUNT=$(($COUNT - 1))
		else
			echo -n " and one $(($SIZE - (($SIZE / $CHUNKSIZE) * $CHUNKSIZE)))b chunk"
		fi
		echo " for $(($COUNT + 1)) total chunks"

		TR_LASTFN=""
		TR_TOTALSIZE=0
		TR_STARTTIME=0
		TR_TEX=""

		for I in $(bash -c 'for I in {00..'$COUNT'}; do echo $I; done')
		do
			N=$((10#$I))
			CURSIZE=0
			CHUNKFN=".$FNAME.$I"

			THISCHUNKSIZE=$CHUNKSIZE
			if [ $N -eq $COUNT ]
			then
				THISCHUNKSIZE=$(($SIZE - ($CHUNKSIZE * $N)))
			fi
			if [ $(cursize "$CHUNKFN") -lt $THISCHUNKSIZE ]
			then
				get "$I"
				sleep $DELAY
			else
				echo "$CHUNKFN [$I of $COUNT] already complete, skipping"
			fi

			while [ $(jobs -p | wc -l) -ge $JOBS ]
			do
				wait -n
			done
		done

		wait

		echo "All chunks finished"

		ALLOK=1

		PARTS=""

		for I in $(bash -c 'for I in {00..'$COUNT'}; do echo $I; done')
		do
			N=$((10#$I))
			CHUNKFN=".$FNAME.$I"
			if [ -e "$CHUNKFN" ]
			then
				CURSIZE=$(stat -c "%s" "$CHUNKFN")
				THISCHUNKSIZE=$CHUNKSIZE
				if [ $N -eq $COUNT ]
				then
					THISCHUNKSIZE=$(($SIZE - ($CHUNKSIZE * $N)))
				fi
				if [ $CURSIZE -lt $THISCHUNKSIZE ]
				then
					echo "$CHUNKFN is incomplete! (Got $CURSIZE of $CHUNKSIZE bytes) Run $0 again"
					ALLOK=0
				fi
			else
				echo "$CHUNKFN is missing! Run $0 again"
				ALLOK=0
			fi
		done
	fi

	if [ "$ALLOK" -eq 1 ]
	then
		for I in $(bash -c 'for I in {00..'$COUNT'}; do echo $I; done')
		do
			echo $'\e[0G\e[1A\e[2K'"Assembling $FNAME... $I/$COUNT"
			dd if=".$FNAME.$I" of="$FNAME" bs=${CHUNKSIZE} count=1 seek=$((10#$I)) &>/dev/null && rm ".$FNAME.$I"
		done
		echo "${GREEN}${FNAME} successfully generated.${RESETCOLOUR}"

		if [ -n "$SHA1SUM" ]
		then
			CHECK="$(sha1sum "$FNAME")"
			if grep -qi "^$SHA1SUM" <<< "$CHECK"
			then
				echo "${GREEN}${BOLD}Checksum OK${RESETCOLOUR}"
			else
				echo "Sha1sum failed, expected $SHA1SUM got $CHECK"
				exit 1
			fi
		fi

		if [ -n "$SHA256SUM" ]
		then
			CHECK="$(sha256sum "$FNAME")"
			if grep -qi "^$SHA256SUM" <<< "$CHECK"
			then
				echo "${GREEN}${BOLD}Checksum OK${RESETCOLOUR}"
			else
				echo "Sha256sum failed, expected $SHA256SUM got $CHECK"
				exit 1
			fi
		fi

		if [ -n "$MD5SUM" ]
		then
			CHECK="$(md5sum "$FNAME")"
			if grep -qi "^$MD5SUM" <<< "$CHECK"
			then
				echo "${GREEN}${BOLD}Checksum OK${RESETCOLOUR}"
			else
				echo "MD5sum failed, expected $MD5SUM got $CHECK"
				exit 1
			fi
		fi
	else
		rm "$FNAME"
		exit 1
	fi
done
