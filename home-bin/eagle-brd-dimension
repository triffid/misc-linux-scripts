#!/usr/bin/perl

# eagle-brd-dimension - emit board dimensions
#
# Copyright (C) 2017-2019 Michael Moon
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

use strict;

use XML::Simple;
use Data::Dumper;

my $plain = 0;

if ($ARGV[0] eq "-p") {
	$plain = 1;
	shift;
}

if (@ARGV < 1) {
	print "Usage: eagle-brd-dimension [-p] <file.brd>\n";
	print "\t-p: plain computer-readable output instead of human-readable\n";
	exit 0;
}

my @brd_offset;

my $fileprefix = $ARGV[0];
$fileprefix =~ s/\.brd$//;

my $xml = new XML::Simple;
my $data = $xml->XMLin($ARGV[0]);

if ($data->{drawing}->{board}->{plain}->{wire}) {
	for (@{$data->{drawing}->{board}->{plain}->{wire}}) {
		if ($_->{layer} == 20) {
			if (@brd_offset == 0) {
				@brd_offset = ($_->{x1}, $_->{y1}, $_->{x1}, $_->{y1});
			}
			$brd_offset[0] = $_->{x1} if $_->{x1} < $brd_offset[0];
			$brd_offset[1] = $_->{y1} if $_->{y1} < $brd_offset[1];
			$brd_offset[2] = $_->{x1} if $_->{x1} > $brd_offset[2];
			$brd_offset[3] = $_->{y1} if $_->{y1} > $brd_offset[3];
			$brd_offset[0] = $_->{x2} if $_->{x2} < $brd_offset[0];
			$brd_offset[1] = $_->{y2} if $_->{y2} < $brd_offset[1];
			$brd_offset[2] = $_->{x2} if $_->{x2} > $brd_offset[2];
			$brd_offset[3] = $_->{y2} if $_->{y2} > $brd_offset[3];
		}
	}
}

eval {
	if ($data->{drawing}->{board}->{plain}->{circle}) {
# 		die Dumper \$data->{drawing}->{board}->{plain}->{circle};
		for (@{$data->{drawing}->{board}->{plain}->{circle}}) {
			if ($_->{layer} == 20) {
				my ($x1, $y1, $x2, $y2) = ($_->{x} - $_->{radius}, $_->{y} - $_->{radius}, $_->{x} + $_->{radius}, $_->{y} + $_->{radius});
				if (@brd_offset == 0) {
					@brd_offset = ($x1, $y1, $x2, $y2);
				}
				$brd_offset[0] = $x1 if $x1 < $brd_offset[0];
				$brd_offset[1] = $y1 if $y1 < $brd_offset[1];
				$brd_offset[2] = $x1 if $x1 > $brd_offset[2];
				$brd_offset[3] = $y1 if $y1 > $brd_offset[3];
				$brd_offset[0] = $x2 if $x2 < $brd_offset[0];
				$brd_offset[1] = $y2 if $y2 < $brd_offset[1];
				$brd_offset[2] = $x2 if $x2 > $brd_offset[2];
				$brd_offset[3] = $y2 if $y2 > $brd_offset[3];
			}
		}
	}
};

my ($dx, $dy, $cx, $cy) = (
	($brd_offset[2] - $brd_offset[0]),
	($brd_offset[3] - $brd_offset[1]),
	($brd_offset[2] + $brd_offset[0]) / 2.0,
	($brd_offset[3] + $brd_offset[1]) / 2.0,
);

if ($plain) {
	my $diagonal = (($dx ** 2) + ($dy ** 2)) ** 0.5;

	printf "%g %g ", $dx, $dy;
	printf "%g %g ", $cx, $cy;
	printf "%g", $diagonal;
}
else {
	printf "Board Dimension: %gmm x %gmm\n", $dx, $dy;
	printf "Board Centroid : %gmm x %gmm\n", $cx, $cy;
}
