#!/usr/bin/python3
# -*- coding: utf8 -*-

import sys
import re
import math

from xml.etree import ElementTree
from pprint import pprint, pformat

if (len(sys.argv) < 2):
	print("Usage: %s <filename.sch> <partname> [partname ...]"%sys.argv[0])
	exit()

parts = sys.argv[2:]

e = ElementTree.parse(sys.argv[1])
r = e.getroot()

footprints = {}

rr = re.compile(r'.*?([A-Za-z][A-Za-z0-9_-]*)$')
unn = re.compile(r'N\$\d+|VCC|GND')

for net in (r.findall('./drawing/schematic/sheets/sheet/nets/') + r.findall('./drawing/schematic/modules/module/sheets/sheet/nets/')):
	netname = net.get('name')
	if (unn.search(netname) is None):
		safenetname = re.sub(r'\!', 'n', netname)
		safenetname = re.sub(r'\W', 'x', safenetname)
		for seg in net.findall('./segment/'):
			if (seg.tag == 'pinref'):
				if (seg.get('part') in parts):
					part = seg.get('part')
					pin = seg.get('pin')
					pin = re.sub(r'\(.*?\)', '', pin)
					pin = re.sub(r'\[.*?\]', '', pin)
					#rematch = rr.match(pin)
					#if (rematch is not None):
						#pinname = rematch.groups()[0]
					pinname = re.sub(r'\!', 'n', pin)
					pinname = re.sub(r'\W.*', '', pinname)
					pinname = re.sub(r'\W', 'x', pinname)
					if (unn.search(pinname) is None):
						print("#define PIN_%-16s %s" % (part + "_" + safenetname, pinname))

# eagle-sch-pinout LS_Control.sch U1 | sed -e "$( ( PRINT=0; while read -u 3; do echo "$REPLY" | grep -q digital_pin_to_port_PGM && PRINT=1; if [[ $PRINT -ge 1 ]]; then echo "$REPLY" | perl -ne '/^.*(P[A-Z]) ([0-9]) \*\* (\d+)/ && print "s/$1$2\$/$3 \\/\\/ arduino pin number $3/;";'; fi; echo "$REPLY" | grep -q '^}' && PRINT=0; done; echo ) 3</usr/share/arduino/hardware/arduino/avr/variants/mega/pins_arduino.h)" | perl -pe 's/(P[A-Z][0-9])$/$1 \/\/no arduino pin number available, use port I\/O/;'
